\ Kevo examples\ (c) Antero Taivalsaari 1992\ Single player squash game (object-oriented implementation)\ Based originally on a similar game by Alan Winfield 1983\ -------------------------------------------------------------DEFINED Squash IF endFrom THEN\ Paths haven't been implemented yet, so we store the common\ constants to SystemRoot -- this will be changed laterSystemRoot ADDS  " quickdraw.kevo" from	\ Load the Mac QuickDraw constants	  : screenWidth		window @ getWindowSize drop ;  : screenHeight	window @ getWindowSize nip ;  : xLimit			screenWidth 24 - ;  : yLimit			screenHeight 24 - ;ENDADDS;\ -------------------------------------------------------------REF Ball			 			\ Define object BallPrototypes.Object.clone -> Ball \ which concatenates to (=inherits from) 'Object'Ball ADDS		\ Add new properties to Ball  VAR x			\ ball x coordinate on the screen  VAR y			\ ball y coordinate   VAR xPrev		\ previous ball x coordinate on the screen  VAR yPrev		\ previous ball y coordinate   VAR xStep		\ ball location horizontal increment  1 -> xStep  VAR yStep		\ ball location vertical increment  1 -> yStep   VAR "ball"  ASCII O -> "ball"	\ ball character\  ASCII O CONST "ball"  : ballMoveTo	\ keep the ball within the allowed limits	swap 1 max xLimit min 	swap 1 max yLimit min moveTo ;  : plot		\ plot a ball at a legal position	\ protected region is used here to allow 	\ multiple balls to be displayed in the same window	\ Otherwise task might be switched between setting the	\ correct text mode, changing the pen location, and drawing	<| 		"patCopy" setTextMode 		ballMoveTo "ball" drawChar 	|> ;  : unplot		\ unplot a ball at a legal position	<| 		"patBic" setTextMode 		ballMoveTo "ball" drawChar	|> ;  : show		\ plot/unplot a ball on the screen	xPrev yPrev unplot	x     y     plot ;  : move		\ update ball coordinates	x -> xPrev 	y -> yPrev 	x xStep + -> x	y yStep + -> y ;  : xReverse		\ reverse the horizontal direction of the ball	xStep +/- -> xStep ;  : yReverse		\ reverse the vertical direction of the ball	yStep +/- -> yStep ;  : checkLeft		\ check for the left edge of the screen	x 1 <=  xStep 0< and IF xReverse THEN ;  : checkRight		\ check for the right edge of the screen	x xLimit >=  xStep 0> and IF xReverse THEN ;  : checkTop		\ check for the upper edge of the screen	y 16 <=  yStep 0< and IF yReverse THEN ;  : checkBottom		\ check for the lower edge of the screen	y yLimit >=  yStep 0> and IF yReverse THEN ;  : checkEdges		\ check for all the edges needed in squash	checkRight	checkTop	checkBottom ;  : try				\ try the operation of the ball plotting routines	BEGIN	  show 	  checkLeft checkRight checkTop checkBottom	  move	AGAIN ;  : randomizeYStep	\ randomize y step	-20 20 rnd -> yStep ;  : deflect			\ deflect the ball	10 40 rnd -> xStep 	randomizeYStep ;  : accelerate		\ accelerate the ball	xReverse  	xStep 5 + -> xStep	yStep 0= IF randomizeYStep THEN ;  : serve			\ serve a random new ball	xLimit 1- -> x			( set x to the right wall )	yLimit 2/ dup 2/ 2dup - -rot + rnd -> y   ( set y )	-40 -10 rnd -> xStep	( randomize x step )	randomizeYStep ;\ Creation operations  : new	\ create a new initialized ball	self.clone dup.serve ;ENDADDS;\ ------------------------------------------------------------REF Bat				\ Define object BatPrototypes.Object.clone -> BatBat ADDS  VAR pos					\ bat position  40 		 CONST batSize  batSize 2/ CONST halfBat  ASCII a 	 CONST "up"		\ bat control buttons (up and down)  ASCII z 	 CONST "down"  : show		\ plot bat on the left hand side of the screen	<| 		"patCopy" setPenMode		2 pos halfBat - moveTo 0 0 lineDelta 	|> ;  : hide		\ plot bat on the left hand side of the screen	<| 		"patBic" setPenMode		2 pos halfBat - moveTo 0 0 lineDelta 	|> ;  : bat++		\ move bat downwards	pos yLimit halfBat - < IF pos 10 + -> pos THEN ;  : bat--		\ move bat upwards	pos halfBat > IF pos 10 - -> pos THEN ;  : move		\ move bat to desired direction	CASE 		"up"   = OF hide bat-- show ENDOF		"down" = OF hide bat++ show ENDOF	ENDCASE ;	( key --  )  : query		\ check keyboard for bat movements	key? ?dup IF move THEN ;  : hitMiddle		\ check if the ball hit the middle of the bat	pos - abs 10 < ;	( ballYCoord -- flag )  : hitCorner		\ check if the ball hit the corner of the bat 	pos - abs halfBat < ;	( ballYCoord -- flag )  : init	\ initialize bat	5 batSize setPenSize  	screenHeight 2/ -> pos ;  : try			\ try the operation of the bat	init show BEGIN query AGAIN ;\ Creation operations  : new	\ create a new initialized bat	self.clone dup.init ;ENDADDS;\ -------------------------------------------------------------REF Squash		\ The Squash game objectPrototypes.Object.clone -> SquashSquash ADDS  VAR ball		\ Game must have a ball  Applications.SquashGames.Ball -> ball  VAR bat		\ Game must have a bat  Applications.SquashGames.Bat -> bat  VAR score		\ score counter  VAR topScore	\ score counter  : printScore	\ print the score on the bottom of the screen	<|			\ Again use protected region		"srcCopy" setTextMode		  4 screenHeight moveTo ." Score: " 		 50 screenHeight moveTo score . space		100 screenHeight moveTo ." TopScore: "		170 screenHeight moveTo topScore . space	|>  ; hidden  : incScore	\ increment score	score + -> score	score topScore > IF score -> topScore THEN ; hidden  : decScore	\ decrement score (minimum score = 0)	score swap - 0 max -> score ; hidden  : checkHits	\ check if the ball hit the screen edges or the bat	ball.checkEdges	ball.x 2 <=	IF 		ball.y CASE			bat.hitMiddle	OF	20 incScore  ball.accelerate	ENDOF 			bat.hitCorner	OF	10 incScore  ball.deflect		ENDOF						ELSEOF 	10 decScore 50 msecs ball.serve	ENDOF		ENDCASE printScore 	THEN ;  : delay		( speed of the game depends on the score )	10 score 100 / - ; hidden (  -- delay )  : resume		\ resume game after it has been initiated	printScore	bat.show	BEGIN	  ball.show	  bat.show	  	  \ Ensure that bat will be queried at least once	  bat.query	  \ Query bat for a certain amount of milliseconds	  delay MSECS bat.query LOOP	  ball.move 	  checkHits	AGAIN ;  : play		\ start a completely new game	0 -> score 	ball.serve	bat.init	resume ;\ Creation operations  : new	clone	ball.new -> over.ball	bat.new -> over.bat ;  : clone	self.deepCopy ;  : dispose	ball.dispose	bat.dispose	dispose ;ENDADDS;\ ---------------------------------------------------------------------------\ Multiple instances of the game can be created by cloning any Squash object