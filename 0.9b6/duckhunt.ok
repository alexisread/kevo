\ Kevo examples\ (c) Antero Taivalsaari 1992\ Simple "shoot the duck" game (object-oriented implementation).\ The game has been modified from a similar starfighter game for \ Forth/Mops by Brian Dunn. Mops version by Mike Hore, Sept 1992.\ Modified for Kevo 24.9.1992 by Antero Taivalsaari \ To load this demo, type:\		" duckhunt.ok" from\ at the command level\ -------------------------------------------------------------" ok.kevo" fromRoot CDDEFINED Applications not IF MKDIR Applications THENApplications CDDEFINED Duckhunt IF endFrom THENMKDIR DuckhuntDuckhunt CDSystemRoot ADDS  " quickdraw.kevo" from	\ Load the Mac QuickDraw constants	  : screenWidth		window @ getWindowSize drop ;  : screenHeight	window @ getWindowSize nip ;  : xLimit			screenWidth  16 - ;  : yLimit			screenHeight 16 - ;  : xCenter 		xLimit 2/ ;  : yCenter			yLimit 2/ ;  : withinScreen 	( x y -- flag )  	\ Check if a given x,y pair is within the screen limits	1 yLimit between swap	1 xLimit between and ;	ENDADDS;\ -------------------------------------------------------------REF DuckPrototypes.Object.clone -> DuckDuck ADDS  VAR x  VAR y    VAR xSpeed  VAR ySpeed    20 CONST maxDuckSpeed    VAR duckSize  10 -> duckSize     5 CONST minDuckSize  20 CONST maxDuckSize    : position	  	\ randomly place the duck near the middle of the screen	1 xCenter rnd  xCenter 4 / +  -> x	1 yCenter rnd  yCenter 4 / +  -> y ;  : turn	\ randomly change the direction of the duck	1 maxDuckSpeed rnd  maxDuckSpeed 2/ -  -> xSpeed	1 maxDuckSpeed rnd  maxDuckSpeed 2/ -  -> ySpeed ;  : shuttle 	\ randomly change the size of the duck	\ making it appear as if the duck was flying	\ away and back again	-2 2 rnd duckSize + 	minDuckSize max maxDuckSize min -> duckSize ;	  : init					\ initialize the position of the duck	position turn ;  : (draw)  (  --  )			\ draw the duck in its current position		\ Draw left vertical wing:		x duckSize -	y duckSize -	moveTo		x duckSize -	y duckSize +	lineTo		\ Draw right vertical wing:		x duckSize +	y duckSize -	moveTo		x duckSize +	y duckSize +	lineTo		\ Draw horizontal wing:		x duckSize -	y 	moveTo		x duckSize +	y	lineTo	; hidden  : draw	(  --  )  	\ draw the duck	<| "patCopy" setPenMode (draw) |> ;  : undraw  (  --  )			\ undraw the duck	<| "patBic" setPenMode (draw) |> ;	  : escaped?	(  -- flag )			\ duck got off the screen?	x  duckSize  xLimit duckSize -  between	y  duckSize  yLimit duckSize -  between  and not ;  : hit?		( x y -- flag )  	\ check if the given x,y pair is within the duck	y duckSize -  y duckSize +  between swap	x duckSize -  x duckSize +  between and ;	  : steer  		(  --  )	\ steer the duck away from current mouse position	{ getMouse -> TEMP mouseY -> TEMP mouseX		\ make random turns occasionally		0 5 rnd 0= IF turn THEN		\ fly away and back occasionally		0 5 rnd 0= IF shuttle THEN		mouseX mouseY withinScreen		IF			\ steer away from the mouse position			xCenter mouseX -	\ how far left of center			60 /				\ scale to ship speeds			xSpeed +			\ offset for duck motion			x + -> x			\ add to current position			yCenter mouseY -	\ how far above center			60 /				\ scale to ship speeds			ySpeed +			\ offset for duck motion			y + -> y			\ add to current position		THEN	} ;  : explode  	\ draw an explosion			50 0 DO <| 		"patCopy" setPenMode		x y moveTo		x -100 100 rnd + 		y -100 100 rnd + lineTo	|> LOOP		10 msecs	 \ 10 millisecond delay	wipeScreen ; \ clear the screen  : fallDown  	\ make the duck fall down from the sky	10 BEGIN 		2+ 		dup y + -> y 		draw undraw		y yLimit >	UNTIL drop ;		  : try		(  --  )	\ for debugging: test the operation of the duck	init  	BEGIN		draw		undraw		steer		escaped? IF init THEN	AGAIN ;ENDADDS;REF GunPrototypes.Object.clone -> GunGun ADDS  VAR shots  50 -> shots    : (shoot)		( x y --  )  	\ draw a laser blast around x,y	{ -> TEMP yPos -> TEMP xPos		48 0 DO			xPos   yPos		  moveTo			0 	   yLimit i - lineTo						xPos   yPos 	  moveTo			xLimit yLimit i - lineTo 		6 +LOOP	} ; hidden	  : shoot  	\ shoot the gun	{ getMouse -> TEMP yPos -> TEMP xPos			shots		IF \			shots 1- 0 max -> shots					<| "patCopy" setPenMode xPos yPos (shoot) |>			<| "patBic"  setPenMode xPos yPos (shoot) |>		THEN 	} ;	  : try  	\ for debugging: test the operation of the gun	BEGIN		button IF shoot THEN	AGAIN ;	ENDADDS;\ Here is the actual game object:\ Note that the game has been implemented using two separate tasks:\ one for the duck and one for the gun. This allows the duck to \ continue flying without significant pauses even when the gun shoots \ The tasks communicate via a common "bulletQueue" which contains\ the coordinates where the gun was shot\ Note that instantiation operations haven't been implemented yet.\ i.e. you cannot instantiate multiple duck games.REF DuckGamePrototypes.Object.clone -> DuckGameDuckGame ADDS  VAR gameWindow  Prototypes.Graphics.Window.new -> gameWindow  " Duckhunt" gameWindow.setTitle  VAR duckTask  Prototypes.Concurrency.BackgroundTask.new -> duckTask  gameWindow -> duckTask.output &.confirm    VAR gunTask  Prototypes.Concurrency.BackgroundTask.new -> gunTask  gameWindow -> gunTask.output &.confirm  VAR bulletQueue  Prototypes.Collections.Queue.new -> bulletQueue  VAR duck  Applications.Duckhunt.Duck -> duck    VAR gun  Applications.Duckhunt.Gun -> gun    VAR meals  VAR misses  : printScore	<|		"srcCopy" setTextMode		  4 screenHeight moveTo ." Meals: " 		 50 screenHeight moveTo meals . space		100 screenHeight moveTo ." Misses: "		170 screenHeight moveTo misses . space	|> ; hidden    : duckJob		( context --  )	\ the behavior of the duck	CD	duck.init printScore  	BEGIN		duck.draw			bulletQueue.isEmpty not		IF 			<| bulletQueue.dequeue &.dequeue |> duck.hit? 			IF 				duck.explode &.fallDown &.init 				meals 1+ -> meals printScore			THEN		THEN				duck.undraw &.steer		duck.escaped? 		IF 			duck.init 			misses 1+ -> misses printScore		THEN	AGAIN ;	' duckJob duckTask.does self &.toData  : gunJob	( context --  )  	\ the behavior of the gun	CD		BEGIN		button 		IF 			getMouse swap <| bulletQueue.enqueue &.enqueue |>			gun.shoot 			20 msecs \ only 5 shots per second are allowed		THEN	AGAIN ;	' gunJob gunTask.does self &.toData	  : play	0 -> meals	0 -> misses	\ Activate the duck and gun tasks  	duckTask.activate	gunTask.activate ;ENDADDS;\ start the game immediatelyDuckGame.play\ give more priority to 'duckTask'DuckGame.duckTask.raisePriority