\ Kevo examples\ (c) Antero Taivalsaari 1992\ n Dining philosophers \ ---------------------------------------------------------------------------" ok.kevo" from			\ Load the object-oriented extensionsApplications CDDEFINED Diners IF endFrom THENMKDIR DinersDiners ADDSREF DiningTable						 \ Define a table for philosophersPrototypes.Object.new -> DiningTable \ which concatenates to (inherits from) ObjectDiningTable ADDS		\ Add new properties to DiningTable  VAR members  Prototypes.Collections.List.new -> members  VAR forks  Prototypes.Collections.List.new -> forks\ Access operations  : add		( aPhilosopher --  )		\ Add a new philosopher to the table 	members.add	1 1 Prototypes.Concurrency.Semaphore.new forks.add ;  : count	(  -- count )		\ Return the number of philosophers in the table	members.count ;  : suspend  		\ Suspend all the philosophers in the table		<|		count TIMES			i members.fetch.suspend		LOOP 		|> ;		  : activate  		\ Activate all the philosopher in the table		<|		count TIMES			i members.fetch.activate		LOOP 		|> ;ENDADDS;\ ---------------------------------------------------------------------------REF Philosopher	\ Define a philosopher object which inherits TerminalTaskPrototypes.Concurrency.TerminalTask.new -> PhilosopherPhilosopher ADDS				\ Add new properties  SHAREDVAR table  Applications.Diners.DiningTable -> table  VAR number  1 -> number  VAR minDelay  10 -> minDelay	( default minimum delay 10 millisecs )    VAR maxDelay  500 -> maxDelay	( default maximum delay 500 millisecs )  \ Auxiliary operations  : printNumber		\ Print the number of the philosopher	." Philosopher #" number . ; hidden  : randomDelay		\ Wait for a random amount of time	minDelay maxDelay rnd msecs ; hidden\ Access operations    : leftFork	(  -- aFork )		\ Return the identity of the left hand side fork	number table.forks.fetch ;  : rightFork	(  -- aFork )		\ Return the identity of the right hand side fork 	number table.count mod 1+ table.forks.fetch ;\ Philosopher's behavior  : career	(  --  )	" Philosopher" self.output.setTitle	BEGIN	  page	  printNumber ." thinking" cr				randomDelay	  printNumber ." waiting for left fork" cr  leftFork.wait	  printNumber ." waiting for right fork" cr rightFork.wait	  printNumber ." eating" cr		  			randomDelay	  printNumber ." releasing right fork" cr	rightFork.signal	  printNumber ." releasing left fork" cr	leftFork.signal	AGAIN ;   self table.add		\ Add the philosopher to the dining table  ' career self.does	\ Set the philosopher's behavior  self.activate			\ and activate him\ Creation operations  : addNew 	(  --  )		\ add a new philosopher to the dining table	clone dup table.add	table.count -> over.number	' career over.does	top.activate ;ENDADDS;\ ---------------------------------------------------------------------------\ Example of use:\ Add 8 more philosophers to the dining table8 TIMES    Philosopher.addNew LOOP	\ ---------------------------------------------------------------------------\ Auxiliary functions just for interactive fun: grab		( n --  )		\ Grab a fork from the table, and see what happens	DiningTable.forks.fetch.wait ;: release	( n --  )		\ Put a fork back to the table	DiningTable.forks.fetch.signal ;ENDADDS;