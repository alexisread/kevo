\ Kevo  (c) Antero Taivalsaari 1992\ ---------------------------------------------------------------------\ This is a more intelligent implementation of a queue\ which uses List as a variable rather than as a parent\ Dequeueing is done with the help of a separate variable\ 'tail' rather than by sliding the items.Prototypes CDDEFINED Collections not IF MKDIR Collections THENCollections CDREF Queue2Prototypes.Object.clone -> Queue2Queue2 ADDS  VAR items  Prototypes.Collections.List.new -> items  VAR tail  0 -> tail    : head  	items.count ;\ Access operations  : enqueue	( item --  )	items.add ;  : dequeue	(  -- item )	tail head = IF ." -- " self.printType ." empty" error THEN	tail 1+ -> tail	tail items.fetch	tail head = IF self.erase THEN ;   : isEmpty 	(  -- flag )  	tail head = ;		  : erase  	0 -> tail	items.erase ;  : count   	head tail - ;	 \ Printing operations  : printContents  	head tail DO		i items.fetch .	LOOP ;	\ Creation operations  : new  	share	items.new -> over.items	0 -> over.tail ;	  : clone  	clone	items.clone -> over.items ;	  : dispose	items.dispose	dispose ;ENDADDS;