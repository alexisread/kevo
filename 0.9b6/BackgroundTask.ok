\ Kevo  (c) Antero Taivalsaari 1992\ ------------------------------------------------------------\ BackgroundTask.ok\ Define the behavior of background task objects.\ These tasks do not have their own window but they\ simply share the window with their creatorPrototypes CDDEFINED Concurrency not IF MKDIR Concurrency THENConcurrency CDREF BackgroundTaskPrototypes.Object.new -> BackgroundTaskBackgroundTask ADDS  ( the prototypical task object shares the data area )  ( with currently running task )  VAR userArea  up @ -> userArea  ( it also shares the prototypical output window )  VAR output  Prototypes.Graphics.Window -> output\ Modification operations  : activate	\ activate the task	userArea activate ;  : suspend			\ suspend the task	userArea suspend ;  : does	( operation --  )	\ set the behavior of the task	userArea does 	( self userArea >taskContext ) ;  : toData	( value --  )	\ push a value to the data stack of the task	userArea >taskData ;  : raisePriority		\ raise the priority of the task	userArea raisePriority ;  : lowerPriority	\ lower the priority of the task	userArea lowerPriority ;  : confirm	(  --  ) 			\ Ensure that output goes to the correct window 			\ This operation must be executed if the task's 			\ window is changed  	output.windowAddr userArea HIS window ! ;\ Inspection operations  : running	(  -- flag )	\ check if the task is currently running	userArea running ;  : priority	(  -- addressOfPriorityField )	\ return the priority of the task	userArea HIS priority @ ;\ Creation operations  : clone	(  -- newObject )	clone	<buildBGTask> -> over.userArea ;  : dispose	running not 	IF userArea <deleteTask> THEN	dispose ;ENDADDS;