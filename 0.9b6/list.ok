\ Kevo  (c) Antero Taivalsaari 1992\ ------------------------------------------------------------------------Prototypes CDDEFINED Collections not IF MKDIR Collections THENCollections CDREF ListPrototypes.Object.clone -> ListList ADDS  VAR items   Prototypes.Collections.FastArray.new -> items  VAR len  0 -> len\ Access operations  : insert	( item position --  )	\ Insert a new item to n'th position	{ -> TEMP pos	  -> TEMP item	  TEMP source	  TEMP length		\ Indexes must be > 0		pos one < IF ." -- Out of range" error THEN		\ Grow the list automatically		len items.count = IF 4 items.grow THEN		\ Move rest of the list upwards		pos items.position 		 -> source		len pos - 1+ cell* 0 max -> length		source length source cell+ move		\ Store new item		item pos items.position !		len 1+ pos max -> len 		} ;  : delete	( pos --  )	\ Delete the n'th item	{ -> TEMP pos	  TEMP target	  TEMP length    		\ Ensure that the item to be deleted is within the list		pos 1 len inRange		\ Move rest of the list downwards		pos items.position 	  -> target		len pos - cell* 0 max -> length		target cell+ length target move		\ Store zero to the last position in the list		0 len items.position !		len 1- -> len	} ;  : find	( item -- pos <OR> 0 )	\ Find the item and return its position or 0 if not found	len TIMES 	    i items.fetch over = 	    IF drop i unloop exit THEN 	LOOP drop 0 ;  : fetch	( position -- item )	dup 1 len inRange items.fetch ;  : store	( item position --  )	dup 1 len inRange items.store ;  : add		( item --  )	\ Add an item to the end of the list	len 1+ insert ;  : remove	( item --  )	\ Remove a certain item from the list if found	find ?dup IF delete THEN ;  : removeAll	( item --  )	\ Remove all the occurrences of a certain item   	BEGIN 		dup find ?dup	WHILE 		delete 	REPEAT drop ;  : isEmpty	(  -- flag )	len 0= ;  : first	(  -- item )	one fetch ;  : last	(  -- item )	len fetch ;  : erase	(  --  )	0 items.resize	0 -> len ;  : area#	(  -- physicalSize )	items.count ;  : count	(  -- logicalSize )	len ;\ Sizing operations  : compact	(  --  )	items.count len - items.shrink ;  : shrink	(  --  )	items.count len - min items.shrink ;  : resize	( newsize --  )	len max items.resize ;\ Printing operations  : printContents	len TIMES	    i items.fetch .	LOOP ;\ Creation operations  : new		(  -- newObject )	new	items.new -> over.items	0 -> over.len ;	  : clone	(  -- newObject )	clone	items.clone -> over.items ;  : dispose		(  --  ) 	items.dispose	dispose ;ENDADDS;