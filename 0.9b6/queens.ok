\ nQueens \ -----------------------------------------------------------------------------\ Originally programmed for the FIFTH system \ (c) Antero Taivalsaari 7.4.1988\ Modified for Kevo 17.2.1992\ (c) Antero Taivalsaari 17.2.1992, 23.7.1992" ok.kevo" fromApplications CDDEFINED Queens IF endFrom THENMKDIR QueensQueens CDREF QueenPrototypes.Object.clone -> QueenQueen ADDS\ Variables  VAR table  Prototypes.Collections.FastArray.new -> table  VAR n			( current size of the table )  4 -> n		( default size = 4 )  n table.resize  VAR x			( current x-coordinate )  VAR solutions	( solution counter )\ Operations  : validPosition	\ check if we are currently in a valid position	x 1- TIMES 	  x table.fetch i table.fetch 2dup = IF 2drop false unloop exit THEN	  - abs x i - abs =					 IF       false unloop exit THEN 	LOOP true ;	hidden		(  -- flag )  : findPosition	\ check if we can find a valid position in the current column	BEGIN	  yield			\ added so that cooperative multitasking will work reasonably	  x table.fetch 1+ dup x table.store n <=	WHILE	  validPosition IF true exit THEN 	REPEAT false ; hidden	(  -- flag )  : nextSolution	\ find the next possible solution	findPosition	IF x n = IF true exit THEN		( solution found )	   x 1+ -> x					( goto next column )	   0 x table.store 	   myself						( do again ) 	ELSE	   x 1 = IF false exit THEN		( no more solutions )	   x 1- -> x					( try previous column )	   myself 						( do again )	THEN ;					(  -- flag )	     : printResults	n . ." queens problem: "	solutions ?dup	IF . ." solutions." 	ELSE ." no solutions." 	THEN cr ;			(  --  )  : countSolutions	\ count all the solutions to an n queens problem	0 -> solutions	BEGIN	  nextSolution	WHILE	  solutions 1+ -> solutions	REPEAT	printResults ;			(  --  )   : setSize			\ set the size of the problem and initialize table	-> n	n table.resize	0 1 table.store	1 -> x ;	( n --  )		\ These operations are needed for printing the solution  : findColumn	( row -- column )	zero 	BEGIN		  1+ dup table.fetch 3 pick = over n > or	UNTIL nip ; hidden  : printArray	(  --  )	n TIMES		i table.fetch .	LOOP cr ;  : printSolution	(  --  )	printArray	n TIMES		i findColumn 2* spaces 		ASCII Q emit cr	LOOP ;  : .line	." -------------------------------" cr ; hidden  : printSolutions	\ print all the solutions to an n queens problem	0 -> solutions	BEGIN 	  nextSolution	WHILE	  solutions 1+ -> solutions	  .line n . ." queens problem solution:" cr	  printSolution	REPEAT	printResults ;\ Creation operations  : clone  	self.deepCopy ;	  : new  	share	table.new -> over.table 	4 over.setSize ; ENDADDS;